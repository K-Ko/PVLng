#!/usr/bin/env php
<?php
/**
 * Compress readings
 *
 * @author     Knut Kohl <github@knutkohl.de>
 * @copyright  2012-2014 Knut Kohl
 * @license    MIT License (MIT) http://opensource.org/licenses/MIT
 * @version    1.0.0
 */

ini_set('display_errors', 0);
error_reporting(0);
ini_set('display_errors', 1);
error_reporting(-1);

// ---------------------------------------------------------------------------

$ts = microtime(TRUE);

// Echo
function e() {
    global $verbose;
    $params = func_get_args();
    $level = array_shift($params);
    if ($level > $verbose) return;

    static $last = 0;
    $now = microtime(TRUE);
    if ($last == 0) $last = $now;
    $text = array_shift($params);
    printf('[%s] (%6.1f) %s'.PHP_EOL, date('H:i:s'), ($now-$last), vsprintf($text, $params));
    $last = $now;
}

// Query database
function q($sql) {
    global $db, $queries;
    $res = $db->query($sql);
    if ($db->error) die($db->error);
    $queries++;
    return $res;
}

// Query Count
function qc($sql) {
    q('SELECT SQL_CALC_FOUND_ROWS * FROM '.$sql.' LIMIT 1');
    return q('SELECT FOUND_ROWS()')->fetch_array(MYSQLI_NUM)[0];
}

function usage() {
    global $argv;
    echo <<<EOT

Compress numeric readings depending of data age

Usage: $argv[0] -c config_file [options]

Options:
    -c    Config file, required
    -n    Make NO backup of readings table before processing
    -d    Dry run, make no changes
    -v    Verbose mode
    -h    This help

Uses compress.conf.php
EOT;
}

// ---------------------------------------------------------------------------

define('STANDARD', 0);

$options = getopt('c:ndvht');

if (!array_key_exists('c', $options) OR $options['c'] == '') {
    echo PHP_EOL, 'Missing config file!', PHP_EOL;
    usage();
    exit(1);
}

if (array_key_exists('h', $options)) {
    usage();
    exit;
}

$backup   = !array_key_exists('n', $options);
$dryrun   = array_key_exists('d', $options);
$verbose  = (int) array_key_exists('v', $options);
$testmode = array_key_exists('t', $options);

$settings = include $options['c'];

// ---------------------------------------------------------------------------

// Read config for database access
$c = include __DIR__ . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR . 'config.php';

$c = $c['Database'];

$db = new \MySQLi($c['Host'], $c['Username'], $c['Password'], $c['Database'], $c['Port'], $c['Socket']);

if ($db->connect_error) die($db->connect_error);

// ---------------------------------------------------------------------------

$queries = 0;

$table = 'pvlng_reading_num';

if ($dryrun) {
    e(0, 'Dry run, make no changes!');
} else {
    if ($testmode) {
        // For testing only: Work on a table copy
        $table = 'pvlng_reading_num_test_'.date('ymd_Hi');
        e(0, '%s', str_repeat('-', 70));
        e(0, '--- TEST - WORK ON "%s" ...', $table);
        q('CREATE TABLE `'.$table.'` LIKE `pvlng_reading_num`');
        q('INSERT INTO `'.$table.'` SELECT * FROM `pvlng_reading_num`');
        e(0, '%s', str_repeat('-', 70));
    }

    if ($backup) {
        $backup = 'pvlng_reading_num_'.date('ymd_Hi');
        e(0, 'Backup to "%s", this may take some time ...', $backup);
        q('CREATE TABLE `'.$backup.'` (
             `id`        smallint unsigned NOT NULL,
             `timestamp` int unsigned NOT NULL,
             `data`      decimal(13,4) NOT NULL
           ) ENGINE=Archive COMMENT="Archived numeric readings"');
        q('INSERT INTO `'.$backup.'` SELECT * FROM `pvlng_reading_num`');
        e(0, 'Done');
    }
}

// ---------------------------------------------------------------------------

$readingsCount = qc('`'.$table.'`');
e(0, 'Readings overall before: %d', $readingsCount);

if (!$dryrun) {
    // Create temp. table to buffer readings to change/delete
    $tableTmp = '@tmp'.rand(10000, 99999);

    q('CREATE TABLE `'.$tableTmp.'` (
         `id`        int unsigned NOT NULL,
         `timestamp` int unsigned NOT NULL,
         `data`      decimal(13,4) NOT NULL,
         `delete`    char(1) NULL
       ) ENGINE="ARCHIVE"'
    );
}

// ---------------------------------------------------------------------------

$channels = q('
  SELECT `id`
       , `name`
       , `description`
       , `guid`
       , `meter`
       , `type`
    FROM `pvlng_channel_view`
   WHERE `write`   = 1 -- only writable channels
     AND `numeric` = 1 -- only numeric channels
     AND `childs`  = 0 -- only real channels without possible childs
     AND `type`   != "Switch"
     AND `guid` IS NOT NULL'
);

// ---------------------------------------------------------------------------
$timemap = array(
    'd' => 'days',
    'w' => 'weeks',
    'm' => 'month',
    'y' => 'years',
);

while ($channel = $channels->fetch_object()) {

    e(0, '%s', str_repeat('-', 70));
    e(0, '%s%s', $channel->name, $channel->description ? ' ('.$channel->description.') ' : '');
    e(0, '%s', $channel->guid);

    if (array_key_exists($channel->guid, $settings)) {
        $set = $settings[$channel->guid];
        $msg = 'Use special setting';
    } else {
        $set = $settings[STANDARD];
        $msg = 'Use default setting';
    }
    if (!is_array($set)) {
        e(0, 'Skip');
        continue;
    }

    e(0, $msg);

    // Calculate time ranges
    $ranges = array();
    foreach ($set as $key=>$value) {
        preg_match('~(\d+)([dwmy])~', $key, $args);
        $t = strtotime('next day midnight -' . $args[1] . $timemap[$args[2]]);
        $ranges[$t] = $value*60;
    }

    krsort($ranges);
    $times = array_keys($ranges);
    // Add "from begin of time" ...
    $times[] = 0;
    $countTimes = count($times);

    $channelCountSql = '`'.$table.'` WHERE `id` = '.$channel->id;
    $channelCount = qc($channelCountSql);
    e(0, 'Channel before : %7d rows', $channelCount);

    if ($channel->type == 'Counter') {
        $func = 'SUM';
    } elseif ($channel->meter) {
        $func = 'MAX';
    } else {
        $func = 'AVG';
    }

    // -----------------------------------------------------------------------

    for ($i=0; $i<$countTimes-1; $i++) {

        e(0, 'Process %s %s', $times[$i+1] ? date('Y-m-d -', $times[$i+1]) : 'before', date('Y-m-d', $times[$i]));

        $passCountSql = sprintf(
            '`%s` WHERE `id` = %d AND `timestamp` > %s AND `timestamp` <= %s',
            $table, $channel->id, $times[$i+1], $times[$i]
        );
        $passCount = qc($passCountSql);

        // Skip if no or only one reading was found
        if ($passCount <= 1) continue;

        e(0, 'Range before   : %7d rows', $passCount);

        // Run from end to start
        $compEnd   = $times[$i];
        $compStart = $compEnd - $ranges[$times[$i]];

        // Loop over all aggregations
        do {
            // Get row count, compressed data and last timestamp
            list($compCount, $compData, $compTimestamp) = q(
                'SELECT COUNT(1), '.$func.'(`data`), MAX(`timestamp`) FROM `'.$table.'`
                  WHERE `id` = '.$channel->id.' AND `timestamp` > '.$compStart.' AND `timestamp` <= '.$compEnd
            )->fetch_array(MYSQLI_NUM);

            // Only if at least 2 rows found to compress to one
            if ($compCount > 1) {

                e(1, '%s - %s : %3d rows', date('Y-m-d H:i:s', $compStart), date('Y-m-d H:i:s', $compEnd), $compCount);

                if (!$dryrun) {
                    if (!$channel->meter) {
                        // Remember last record
                        q('INSERT INTO `'.$tableTmp.'`
                                  (`id`, `timestamp`, `data`)
                           VALUES ('.$channel->id.', '.$compTimestamp.', "'.$compData.'")'
                        );
                    }

                    // Remember now obsolete records
                    q('INSERT INTO `'.$tableTmp.'`
                              (`id`, `timestamp`, `delete`)
                       SELECT `id`, `timestamp`, "x" FROM `'.$table.'`
                        WHERE `id` = '.$channel->id.' AND `timestamp` > '.$compStart.' AND `timestamp` < '.$compTimestamp
                    );
                }

                // Subtract the one row which will remain
                $passCount     -= $compCount - 1;
                $channelCount  -= $compCount - 1;
                $readingsCount -= $compCount - 1;
            }

            // Move aggregation range backwards
            $compStart -= $ranges[$times[$i]];
            $compEnd   -= $ranges[$times[$i]];

        } while ($compEnd > $times[$i+1]);

        e(0, 'Range after    : %7d rows', $passCount);
    }

    e(0, 'Channel after  : %7d rows', $channelCount);
}

e(0, '%s', str_repeat('-', 70));

if (!$dryrun) {
    q('UPDATE `'.$table.'` t, `'.$tableTmp.'` d
          SET t.`data` = d.`data`
        WHERE t.`id` = d.`id` AND t.`timestamp` = d.`timestamp` AND d.`delete` IS NULL');
    e(0, 'Updated rows           : %7d', $db->affected_rows);

    q('DELETE t FROM `'.$table.'` t
         JOIN `'.$tableTmp.'` d ON t.`id` = d.`id` AND t.`timestamp` = d.`timestamp` AND d.`delete` IS NOT NULL');
    e(0, 'Removed rows           : %7d', $db->affected_rows);

    if (!$testmode) q('DROP TABLE `'.$tableTmp.'`');
    $readingsCount = qc('`'.$table.'`');
}

e(0, 'Readings overall after : %d', $readingsCount);

if (!$dryrun) {
    e(0, 'Optimize table ...');
    q('OPTIMIZE TABLE '.$table);
    e(0, 'Done');
}

e(0, '%d queries in %.1f minutes', $queries, number_format((microtime(TRUE) - $ts)/60, 0));
e(0, 'Finished');
