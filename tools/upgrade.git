#!/bin/bash

# set -x

function e { echo; echo $@; }
function usage {
    [ "$1" ] && echo && echo $1
    echo
    echo Upgrade your installation to lastest state from Github.
    echo
    echo "Usage: $0 <branch>"
    echo
    exit ${2:-0}
}

[ -d .git ] || usage "ERROR: Script must run from installation directory (where the .git diretoy resides)" 1

[ "$1" ] || usage

echo
echo -n 'Fetch last version from GitHub ... '

git checkout $1
rc=$?
[ $rc -ne 0 ] && exit $rc
git pull

echo -e \\b\\b\\b\\b- done

### Extract MySQL credentials
function dbconf {
    sed -n 's/.*['\''"]'$1'['\''"] *=> *['\''"]*\([^'\''",]*\).*/\1/p' config/config.php | tail -n1
}

# Batch silent mode
params="-B -h $(dbconf Host) -P $(dbconf Port) -u $(dbconf Username) --password=$(dbconf Password)"

dbsocket=$(dbconf Socket)
[ "$dbsocket" ] && params="$params -S $dbsocket"

dbname=$(dbconf Database)

level=$(mysql $params -Ne 'SELECT `value` FROM `pvlng_config` WHERE `key` = "DBPatchLevel"' $dbname >/dev/null 2>&1)
level=$((${level:-0}+0))

e Actual database patch level is $level

tmp=$(tempfile)
trap "rm $tmp" 0

ls sql/patches >$tmp

while read f; do

    patch=$(echo $f | cut -d. -f1)

    if [ $patch -gt $level ]; then

        [ "$last" ] || echo

        echo -n "- Apply patch $f ... "
        mysql $params $dbname <sql/patches/$f >/dev/null 2>&1
        echo -e \\b\\b\\b\\b- done

        ### Remember last patch
        last=$patch

    fi

done <$tmp

if [ "$last" ]; then
    mysql $params -e 'REPLACE INTO `pvlng_config` (`key`, `value`) VALUES ("DBPatchLevel", '$last')' $dbname >/dev/null 2>&1
    e Patched database to level $last
    e NEXT
    e - Open http://your.domain.here/cc in your browser and clear the caches!
    e - Clear also your browser cache!
else
    e No patches required.
fi

echo
